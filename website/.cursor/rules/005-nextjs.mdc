---
description: Use when writing Next.js 15 API routes and handlers to ensure proper patterns
globs: src/app/api/**/*.ts
---

# Next.js 15 API Routes Patterns

## Context
- Applied when creating or modifying Next.js 15 API routes
- Ensures correct handling of route parameters and requests
- Enforces best practices for API response formatting

## Requirements

### Route Parameters
- **ALWAYS** await route parameters in Next.js 15
- Route handler params are provided as a Promise that must be awaited
- Use proper TypeScript typing for params

### Error Handling
- Implement comprehensive try/catch blocks
- Log errors with appropriate context
- Return structured error responses with proper status codes

### Response Formatting
- Use NextResponse.json() for consistent response formatting
- Include appropriate status codes
- Set necessary headers for CORS, caching, etc. when required

## Examples

<example>
✅ Good Route Handler Pattern:
```typescript
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ slug: string }> }
) {
  try {
    // Correctly await the params
    const { slug } = await params;
    
    // Process the request
    const data = await fetchData(slug);
    
    // Return formatted response
    return NextResponse.json(data);
  } catch (error) {
    console.error(`Error processing ${request.url}:`, error);
    return NextResponse.json(
      { error: 'Failed to process request' },
      { status: 500 }
    );
  }
}
```
</example>

<example type="invalid">
❌ Bad Route Handler Pattern:
```typescript
export async function GET(
  request: NextRequest,
  { params }: { params: { slug: string } }
) {
  // ERROR: Not awaiting params - will cause runtime errors
  const { slug } = params;
  
  // No error handling
  const data = await fetchData(slug);
  return NextResponse.json(data);
}
```
</example>

<critical>
- NEVER forget to await params in Next.js 15 route handlers
- ALWAYS implement proper error handling
- Type params as Promise<{ [param]: string }> to ensure correct usage
</critical> 